#! check_ok

use std.{memory.alloc, test.assert_eq};

struct Iter {
	var pointer: *i32;
	var end: *i32;
	
	func __next__(self) -> *i32 {
		if self.pointer == self.end {
			return null;
		}
	
		var value = self.pointer;
		self.pointer += 1 as *i32;
		return value;
	}
}

struct Sequence {
	var items: *i32;
	
	func new() -> Sequence {
		var items = alloc(4) as *i32;
		items[0] = 54;
		items[1] = -82;
		items[2] = 2;
		items[3] = -103;
		
		return { items };
	}
	
	pub func __iter__(self) -> Iter {	
		return {
			pointer: self.items,
			end: &self.items[4]
		};
	}
}

func main() {
	var index = 0;
	for i in 5..10 {
		if index == 0 { assert_eq(i, 5); }
		else if index == 1 { assert_eq(i, 6); }
		else if index == 2 { assert_eq(i, 7); }
		else if index == 3 { assert_eq(i, 8); }
		else if index == 4 { assert_eq(i, 9); }
		
		index += 1;
	}

	var sequence = Sequence.new();

	index = 0;
	for item in sequence {
		if index == 0 { assert_eq(item, 54); }
		else if index == 1 { assert_eq(item, -82); }
		else if index == 2 { assert_eq(item, 2); }
		else if index == 3 { assert_eq(item, -103); }
	
		index += 1;
	}
	
	for *item in sequence {
		*item += 3;
	}
	
	index = 0;
	for item in sequence {
		if index == 0 { assert_eq(item, 57); }
		else if index == 1 { assert_eq(item, -79); }
		else if index == 2 { assert_eq(item, 5); }
		else if index == 3 { assert_eq(item, -100); }
	
		index += 1;
	}
}
