# test:common

use std.path.Path;

# test:subtest
# test:output "file.txt,desktop,desktop,.,..,file.txt,.,..,file.txt,user"

func main() {
    print(Path.from("/home/user/desktop/file.txt").file_name());
    print(',');
    print(Path.from("/home/user/desktop").file_name());
    print(',');
    print(Path.from("/home/user/desktop/").file_name());
    print(',');
    print(Path.from("/home/user/.").file_name());
    print(',');
    print(Path.from("/home/user/..").file_name());
    print(',');
    print(Path.from("file.txt").file_name());
    print(',');
    print(Path.from(".").file_name());
    print(',');
    print(Path.from("..").file_name());
    print(',');
    print(Path.from("C:\\Users\\user\\file.txt").file_name());
    print(',');
    print(Path.from("C:\\Users\\user").file_name());
}

# test:subtest
# test:output "/home/user/desktop,/home/user,/home/user,C:/Users/user,C:/Users,C:/Users"

func main() {
    print(Path.from("/home/user/desktop/file.txt").parent());
    print(',');
    print(Path.from("/home/user/desktop").parent());
    print(',');
    print(Path.from("/home/user/desktop/").parent());
    print(',');
    print(Path.from("C:\\Users\\user\\file.txt").parent());
    print(',');
    print(Path.from("C:\\Users\\user\\").parent());
    print(',');
    print(Path.from("C:\\Users\\user").parent());
}

# test:subtest
# test:write_file "file" "."
# test:create_dir "directory"
# test:output "true,true,false"

func main() {
    print(Path.from("file").exists());
    print(',');
    print(Path.from("directory").exists());
    print(',');
    print(Path.from("thisfiledoesntexist").exists());
}

# test:subtest
# test:write_file "file" ""
# test:output "true,false"

func main() {
    var path = Path.from("file");
    print(path.is_file());
    print(',');
    print(path.is_dir());
}

# test:subtest
# test:create_dir "directory"
# test:output "false,true"

func main() {
    var path = Path.from("directory");
    print(path.is_file());
    print(',');
    print(path.is_dir());
}

# test:subtest
# test:create_dir "root"
# test:write_file "root/file_a" ""
# test:write_file "root/file_b" ""
# test:create_dir "root/sub_dir" ""
# test:write_file "root/sub_dir/file_c" ""
# test:output "3,ok,ok,ok,1,ok"

func main() {
    var paths_root = Path.from("root").list_dir();
    var paths_sub_dir = Path.from("root/sub_dir").list_dir();

    print(paths_root.length);
    print(',');
    check_contains(&paths_root, "root/file_a");
    print(',');
    check_contains(&paths_root, "root/file_b");
    print(',');
    check_contains(&paths_root, "root/sub_dir");
    print(',');
    print(paths_sub_dir.length);
    print(',');
    check_contains(&paths_sub_dir, "root/sub_dir/file_c");
}

func check_contains(paths: *Array[Path], path: StringSlice) {
    var found = false;
    
    # FIXME: Iterating over dereferenced pointers to arrays.
    for i in 0..paths.length {
        if (*paths)[i].str() == path {
            found = true;
            break;
        }
    }

    if found {
        print("ok");
    } else {
        print("missing");
    }
}
