# test:common

native func putchar(i32) -> i32;

# test:subtest
# test:output "fg"

struct Char {
    var field: u8;

    func out(self, arg: u8) {
        putchar(self.field as i32);
        putchar(arg as i32);
    }
}

func main() {
    var char = Char {
        field: 'f',
    };
    
    char.out('g');
}

# test:subtest
# test:output "fg"

struct Char {
    var field: u8;

    func out(self, arg: u8) {
        putchar(self.field as i32);
        putchar(arg as i32);
    }
}

func main() {
    var char = Char {
        field: 'f',
    };
    
    var a = &char;
    a.out('g');
}

# test:subtest
# test:output "fg"

struct Char {
    var field: u8;

    func out(self, arg: u8) {
        putchar(self.field as i32);
        putchar(arg as i32);
    }
}

func main() {
    var char = Char {
        field: 'f',
    };
    
    var a = &char;
    var b = &a;
    
    b.out('g');
}

# test:subtest
# test:output "Ab"

union Char {
    case Lower(value: u8);
    case Upper(value: u8);

    func out(self, arg: u8) {
        switch self {
            case char: Lower { putchar(char.value as i32); }
            case char: Upper { putchar(char.value as i32); }
        }
        
        putchar(arg as i32);
    }
}

func main() {
    var char: Char = Char.Upper('A');
    char.out('b');
}

# test:subtest
# test:output "a"

union Char {
    case Lower(value: u8);
    case Upper(value: u8);

    func out(self) {
        switch self {
            case char: Lower { putchar(char.value as i32); }
            case char: Upper { putchar(char.value as i32); }
        }
    }
}

func main() {
    var char: Char = Char.Lower('a');
    var a = &char;
    a.out();
}

# test:subtest
# test:output "Test Text: Hello, World"

struct Text {
	var name: *u8;
	var value: *u8;
	
	func print_value(self) {
		print(self.value);
	}
	
	func print_with_name(self) {
		print(self.name);
		print(": ");
		self.print_value();
	}
}

func main() {
	var text = Text { name: "Test Text", value: "Hello, World" };
	text.print_with_name();
}

# test:subtest
# test:output "Frank"

struct Person {
	var name: *u8;

	func print_name(self) {
		var me = self;
		print(me.name);
	}
}

func main() {
	var person = Person { name: "Frank" };
	person.print_name();
}

# test:subtest
# test:output "5,8"

struct Point {
    var x: i32;
    var y: i32;

    func output(self) {
        print(self.x);
        print(',');
		print(self.y);
    }
}

func main() {
    var point = Point { x: 5, y: 8 };
    point.output();
}

# test:subtest
# test:output "7,12"

struct Point {
    var x: i32;
    var y: i32;

	func set(mut self, x: i32, y: i32) {
		self.x = x;
		self.y = y;
	}

    func output(self) {
        print(self.x);
        print(',');
		print(self.y);
    }
}

func main() {
    var point = Point { x: 0, y: 0 };
	point.set(7, 12);
    point.output();
}
