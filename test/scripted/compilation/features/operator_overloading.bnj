# test:subtest
# test:output 5,-2

struct Point {
    var x: i32;
    var y: i32;
    
    func __add__(self, rhs: Point) -> Point {
        return Point {
            x: self.x + rhs.x,
            y: self.y + rhs.y,
        };
    }
}

func main() {
    var a = Point {
        x: 3,
        y: 10,
    };
    
    var b = Point {
        x: 2,
        y: -12,
    };
    
    var c = a + b;
    
    print(c.x);
    print(",");
    print(c.y);
}

# test:subtest
# test:output 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18

struct S {
    func __add__(self, rhs: i32) -> i32 { return 0; }
    func __sub__(self, rhs: i32) -> i32 { return 1; }
    func __mul__(self, rhs: i32) -> i32 { return 2; }
    func __div__(self, rhs: i32) -> i32 { return 3; }
    func __mod__(self, rhs: i32) -> i32 { return 4; }
    func __bitand__(self, rhs: i32) -> i32 { return 5; }
    func __bitor__(self, rhs: i32) -> i32 { return 6; }
    func __bitxor__(self, rhs: i32) -> i32 { return 7; }
    func __shl__(self, rhs: i32) -> i32 { return 8; }
    func __shr__(self, rhs: i32) -> i32 { return 9; }
    func __eq__(self, rhs: i32) -> i32 { return 10; }
    func __ne__(self, rhs: i32) -> i32 { return 11; }
    func __gt__(self, rhs: i32) -> i32 { return 12; }
    func __lt__(self, rhs: i32) -> i32 { return 13; }
    func __ge__(self, rhs: i32) -> i32 { return 14; }
    func __le__(self, rhs: i32) -> i32 { return 15; }
    func __neg__(self) -> i32 { return 16; }
    func __bitnot__(self) -> i32 { return 17; }
    func __deref__(self) -> i32 { return 18; }
}

func main() {
    var s = S {};

    print(s + 1);
    print(",");
    print(s - 1);
    print(",");
    print(s * 1);
    print(",");
    print(s / 1);
    print(",");
    print(s % 1);
    print(",");
    print(s & 1);
    print(",");
    print(s | 1);
    print(",");
    print(s ^ 1);
    print(",");
    print(s << 1);
    print(",");
    print(s >> 1);
    print(",");
    print(s == 1);
    print(",");
    print(s != 1);
    print(",");
    print(s > 1);
    print(",");
    print(s < 1);
    print(",");
    print(s >= 1);
    print(",");
    print(s <= 1);
    print(",");
    print(-s);
    print(",");
    print(~s);
    print(",");
    print(*s);
}

# test:subtest
# test:output 0,1,2,3

struct S {
    func __add__(self, rhs: i32) -> i32 { return 0; }
    func __add__(self, rhs: f32) -> i32 { return 1; }
    func __add__(self, rhs: bool) -> i32 { return 2; }
    func __add__(self, rhs: S) -> i32 { return 3; }
}

func main() {
    var s = S {};
    
    print(s + 1);
    print(",");
    print(s + 1.0);
    print(",");
    print(s + true);
    print(",");
    print(s + S {});
}

# test:subtest
# test:output 0,1,2,3,4,5,6,7,8,9

struct S {
    var value: i32;

    func __add__(self, rhs: i32) -> S { return S { value: 0 }; }
    func __sub__(self, rhs: i32) -> S { return S { value: 1 }; }
    func __mul__(self, rhs: i32) -> S { return S { value: 2 }; }
    func __div__(self, rhs: i32) -> S { return S { value: 3 }; }
    func __mod__(self, rhs: i32) -> S { return S { value: 4 }; }
    func __bitand__(self, rhs: i32) -> S { return S { value: 5 }; }
    func __bitor__(self, rhs: i32) -> S { return S { value: 6 }; }
    func __bitxor__(self, rhs: i32) -> S { return S { value: 7 }; }
    func __shl__(self, rhs: i32) -> S { return S { value: 8 }; }
    func __shr__(self, rhs: i32) -> S { return S { value: 9 }; }
}

func main() {
    var s = S { value: 0 };

    s += 1;
    print(s.value);
    print(",");
    
    s -= 1;
    print(s.value);
    print(",");
    
    s *= 1;
    print(s.value);
    print(",");
    
    s /= 1;
    print(s.value);
    print(",");
    
    s %= 1;
    print(s.value);
    print(",");
    
    s &= 1;
    print(s.value);
    print(",");
    
    s |= 1;
    print(s.value);
    print(",");
    
    s ^= 1;
    print(s.value);
    print(",");

    s <<= 1;
    print(s.value);
    print(",");

    s >>= 1;
    print(s.value);
}

# test:subtest
# test:output "mim"

struct S {
    var a: u8;
    var b: u8;

    pub func __index__(self, index: i32) -> ref u8 {
        return self.a;
    }

    pub func __mutindex__(self, index: i32) -> ref u8 {
        return self.b;
    }
}

func index(ref s: S) {
    print(s[0]);
}

func mutindex(ref mut s: S) {
    print(s[0]);
}

func main() {
    var s = S {
        a: 'i',
        b: 'm',
    };

    print(s[0]);
    index(s);
    mutindex(s);
}

# test:subtest
# test:output "42"

struct S {
    var f: i32;

    pub func __index__(self, index: i32) -> ref i32 {
        return self.f;
    }
}

func main() {
    var a = S { f: 42 };
    print(a[0]);
}

# test:subtest
# test:output "4,true,0.125"

struct S {
    var f: i32;

    pub func __index__(self, a: i32, b: bool, c: f32) -> ref i32 {
        print(a);
        print(',');
        print(b);
        print(',');
        print(c);

        return self.f;
    }
}

func main() {
    var a = S { f: 42 };
    var b = a[4, true, 0.125];
}

# test:subtest
# test:output "42"

struct S {
    var f: i32;

    pub func __index__(self) -> ref i32 {
        return self.f;
    }
}

func main() {
    var a = S { f: 42 };
    print(a[]);
}
