# test:subtest
# test:error 13:9 "struct 'Point' has no field named 'a'"
# test:error 12:17 "missing value for field 'x' of struct 'Point'"
# test:error 12:17 "missing value for field 'y' of struct 'Point'"

struct Point {
    var x: i32;
    var y: i32;
}

func main() {
    var point = Point {
        a: 2,
    };
}

# test:subtest
# test:error 29:9 "struct 'Point' has no field named 'a'"
# test:error 28:24 "missing value for field 'x' of struct 'Point'"
# test:error 28:24 "missing value for field 'y' of struct 'Point'"

struct Point {
    var x: i32;
    var y: i32;
}

func main() {
    var point: Point = {
        a: 2,
    };
}

# test:subtest
# test:error 46:9 "struct 'Point' has no field named 'a'"
# test:error 47:9 "struct 'Point' has no field named 'b'"
# test:error 45:17 "missing value for field 'x' of struct 'Point'"
# test:error 45:17 "missing value for field 'y' of struct 'Point'"

struct Point {
    var x: i32;
    var y: i32;
}

func main() {
    var point = Point {
        a: 2,
        b: 3
    };
}

# test:subtest
# test:error 65:11 "struct 'Point' has no field named 'a'"

struct Point {
    var x: i32;
    var y: i32;
}

func main() {
    var point = Point {
        x: 2,
        y: 3,
    };
    
    point.a = 2;
}

# test:subtest
# test:error 83:13 "struct 'Point' has no field named 'a'"

struct Point {
    var x: i32;
    var y: i32;
}

func main() {
    var point = Point {
        x: 2,
        y: 3,
    };
    
    var pointer = &point;
    pointer.a = 2;
}

# test:subtest
# test:error 96:15 "union case 'A' has no field named 'test'"

union U {
    case A(a: i32);
    case B(b: i32);
}

func main() {
    var a = U.A(0);
    var b = a.test;
}

# test:subtest
# test:error 105:15 "tuple '(i32, bool)' has no field named '2'"
# test:error 106:15 "tuple '(i32, bool)' has no field named '3'"

func main() {
    var a = (5, true);
    var b = a.2;
    var c = a.3;
}

# test:subtest
# test:error 114:15 "tuple '(i32, bool)' has no field named 'test'"

func main() {
    var a = (5, true);
    var b = a.test;
}