use std.config;
use os;

meta if os.IS_UNIX {
    struct Timespec {
        var tv_sec: u64;
        var tv_nsec: u64;
    }

    const S_IFMT: u32 = 0o170000;
    const S_IFSOCK: u32 = 0o140000;
    const S_IFLNK: u32 = 0o120000;
    const S_IFREG: u32 = 0o100000;
    const S_IFBLK: u32 = 0o600000;
    const S_IFDIR: u32 = 0o040000;
    const S_IFCHR: u32 = 0o020000;
    const S_IFIFO: u32 = 0o010000;

    meta if config.OS == config.LINUX {
        struct Stat {
            var dev: u64;
            var ino: u64;
            var nlink: u64;
            var mode: u32;
            var uid: u32;
            var gid: u32;
            var pad0: i32;
            var rdev: u64;
            var size: i64;
            var blksize: i64;
            var blocks: i64;
            var atim: Timespec;
            var mtim: Timespec;
            var ctim: Timespec;
            var reserved: [i64; 3];
        }

        struct Sockaddr {
            var family: u16;
            var data: [u8; 14];
        }

        struct Addrinfo {
            var flags: i32;
            var family: i32;
            var socktype: i32;
            var protocol: i32;
            var addrlen: u32;
            var addr_: *Sockaddr;
            var canonname: *u8;
            var next: *Addrinfo;
        }

        # TODO: This size is definitely only 40 on x86-64.
        type PthreadMutex = [u8; 40];

        const F_OK: i32 = 0;

        const CLOCK_REALTIME: u64 = 0;
        const CLOCK_MONOTONIC: u64 = 1;

        const AF_INET: i32 = 2;
        const AF_INET6: i32 = 10;
        const SOCK_STREAM: i32 = 1;
        const SOCK_DGRAM: i32 = 2;
        const IPPROTO_TCP: i32 = 6;
        const IPPROTO_UDP: i32 = 17;
        const SHUT_RD: i32 = 0;
        const SHUT_WR: i32 = 1;
        const SHUT_RDWR: i32 = 2;

        native var stdin: addr;
        native var stdout: addr;
        native var stderr: addr;
    } else if os.IS_DARWIN {
        struct Sockaddr {
            var len: u8;
            var family: u8;
            var data: [u8; 14];
        }

        struct Addrinfo {
            var flags: i32;
            var family: i32;
            var socktype: i32;
            var protocol: i32;
            var addrlen: u32;
            var canonname: *u8;
            var addr_: *Sockaddr;
            var next: *Addrinfo;
        }

        struct PthreadMutex {
            var sig: u64;

            # TODO: This size is definitely only 56 on AArch64.
            var opaque: [u8; 56];
        }

        const F_OK: i32 = 0;

        const CLOCK_REALTIME: u64 = 0;
        const CLOCK_MONOTONIC: u64 = 6;

        const AF_INET: i32 = 2;
        const AF_INET6: i32 = 30;
        const SOCK_STREAM: i32 = 1;
        const SOCK_DGRAM: i32 = 2;
        const IPPROTO_TCP: i32 = 6;
        const IPPROTO_UDP: i32 = 17;
        const SHUT_RD: i32 = 0;
        const SHUT_WR: i32 = 1;
        const SHUT_RDWR: i32 = 2;

        @[link_name=__stdinp]
        native var stdin: addr;

        @[link_name=__stdoutp]
        native var stdout: addr;

        @[link_name=__stderrp]
        native var stderr: addr;
    }

    native func stat(pathname: *u8, statbuf: *Stat) -> i32;
    native func access(pathname: *u8, mode: i32) -> i32;
    native func close(fd: i32) -> i32;
    native func strerror(errnum: i32) -> *u8;
    native func pthread_create(thread: *usize, attr: addr, start_routine: func(addr), arg: addr) -> i32;
    native func pthread_join(thread: usize, retval: *addr) -> i32;
    native func pthread_mutex_init(mutex: *PthreadMutex, attr: addr) -> i32;
    native func pthread_mutex_lock(mutex: *PthreadMutex) -> i32;
    native func pthread_mutex_unlock(mutex: *PthreadMutex) -> i32;
    native func pthread_mutex_destroy(mutex: *PthreadMutex) -> i32;
    native func nanosleep(req: *Timespec, rem: *Timespec);
    native func get_nprocs() -> i32;
    native func clock_gettime(clk_id: u64, tp: *Timespec) -> i32;
    native func socket(socket_family: i32, socket_type: i32, protocol: i32) -> i32;
    native func connect(sockfd: i32, addr_: *Sockaddr, addrlen: u32) -> i32;
    native func send(sockfd: i32, buf: addr, len: usize, flags: i32) -> i64;  # TODO: isize
    native func recv(sockfd: i32, buf: addr, len: usize, flags: i32) -> i64;  # TODO: isize
    native func shutdown(sockfd: i32, how: i32) -> i32;
    native func getaddrinfo(node: *u8, service: *u8, hints: *Addrinfo, res: **Addrinfo) -> i32;
    native func freeaddrinfo(res: *Addrinfo);

    meta if config.OS == config.LINUX {
        native func __errno_location() -> *i32;

        pub func errno() -> i32 {
            return *__errno_location();
        }
    } else if os.IS_DARWIN {
        native func __error() -> *i32;

        pub func errno() -> i32 {
            return *__error();
        }
    }
}
