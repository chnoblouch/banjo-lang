use os;

meta if os.IS_UNIX {
    struct Timespec {
        var tv_sec: u64;
        var tv_nsec: u64;
    }

    struct Sockaddr {
        var family: u16;
        var data: [u8; 14];   
    }

    struct Addrinfo {
        var flags: i32;
        var family: i32;
        var socktype: i32;
        var protocol: i32;
        var addrlen: u32;
        var addr_: *Sockaddr;
        var canonname: *u8;
        var next: *Addrinfo;
    }

    const CLOCK_REALTIME: u64 = 0;
    const CLOCK_MONOTONIC: u64 = 1;

    # TODO: These are probably different per operating system.
    const AF_INET: i32 = 2;
    const AF_INET6: i32 = 10;
    const SOCK_STREAM: i32 = 1;
    const SOCK_DGRAM: i32 = 2;
    const IPPROTO_TCP: i32 = 6;
    const IPPROTO_UDP: i32 = 17;
    const SHUT_RD: i32 = 0;
    const SHUT_WR: i32 = 1;
    const SHUT_RDWR: i32 = 2;

    native var stdin: addr;
    native var stdout: addr;
    native var stderr: addr;

    native func close(fd: i32) -> i32;
    native func strerror(errnum: i32) -> *u8;
    native func __errno_location() -> *i32;
    native func pthread_create(thread: *usize, attr: addr, start_routine: func(addr), arg: addr) -> i32;
    native func pthread_join(thread: usize, retval: *addr) -> i32;
    native func nanosleep(req: *Timespec, rem: *Timespec);
    native func get_nprocs() -> i32;
    native func clock_gettime(clk_id: u64, tp: *Timespec) -> i32;
    native func socket(socket_family: i32, socket_type: i32, protocol: i32) -> i32;
    native func connect(sockfd: i32, addr_: *Sockaddr, addrlen: u32) -> i32;
    native func send(sockfd: i32, buf: addr, len: usize, flags: i32) -> i64;  # TODO: isize
    native func recv(sockfd: i32, buf: addr, len: usize, flags: i32) -> i64;  # TODO: isize
    native func shutdown(sockfd: i32, how: i32) -> i32;
    native func getaddrinfo(node: *u8, service: *u8, hints: *Addrinfo, res: **Addrinfo) -> i32;
    native func freeaddrinfo(res: *Addrinfo);

    pub func errno() -> i32 {
        return *__errno_location();
    }
}
