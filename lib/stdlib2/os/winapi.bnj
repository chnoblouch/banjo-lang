type Bool = u32;
type Handle = addr;
type Word = u16;
type Dword = u32;
type LargeInteger = u64;
type Int = i32;

# --- handleapi.h ---

@[link_name=CloseHandle]
native func close_handle(object: Handle) -> bool;

# --- winbase.h ---

const FORMAT_MESSAGE_ALLOCATE_BUFFER: u32 = 0x00000100;
const FORMAT_MESSAGE_ARGUMENT_ARRAY: u32 = 0x00002000;
const FORMAT_MESSAGE_FROM_HMODULE: u32 = 0x00000800;
const FORMAT_MESSAGE_FROM_STRING: u32 = 0x00000400;
const FORMAT_MESSAGE_FROM_SYSTEM: u32 = 0x00001000;
const FORMAT_MESSAGE_IGNORE_INSERTS: u32 = 0x00000200;

@[link_name=LocalFree]
native func local_free(mem: addr) -> addr;

@[link_name=FormatMessageA]
native func format_message(
    flags: Dword,
    source: addr,
    message_id: Dword,
    language_id: Dword,
    buffer: **u8,
    size: Dword,
    arguments: addr
) -> u32;

# --- minwinbase.h ---

struct Filetime {
    var low_date_time: u32;
    var high_date_time: u32;
}

# --- synchapi.h ---

@[link_name=WaitForSingleObject]
native func wait_for_single_object(
    handle: addr,
    milliseconds: u32
) -> u32;

@[link_name=Sleep]
native func sleep(milliseconds: u32);

# --- processthreadsapi.h ---

@[link_name=CreateThread]
native func create_thread(
    thread_attributes: addr,
    stack_size: usize,
    start_address: func(addr),
    parameter: addr,
    creation_flags: u32,
    thread_id: *u32
) -> addr;

# --- sysinfoapi.h ---

struct SystemInfo {
    var union_0: u32;
    var page_size: u32;
    var minimum_application_dddress: addr;
    var maximum_application_dddress: addr;
    var active_processor_mask: *u32;
    var number_of_processors: u32;
    var processor_type: u32;
    var allocation_granularity: u32;
    var processor_level: u16;
    var processor_revision: u16;
}

@[link_name=GetNativeSystemInfo]
native func get_native_system_info(system_info: *SystemInfo);

@[link_name=GetSystemTimeAsFileTime]
native func get_system_time_as_file_time(system_time_as_file_time: *Filetime);

# --- profileapi.h ---

@[link_name=QueryPerformanceCounter]
native func query_performance_counter(performance_count: *LargeInteger) -> bool;

@[link_name=QueryPerformanceFrequency]
native func query_performance_frequency(frequency: *LargeInteger) -> bool;

# --- errhandlingapi.h ---

@[link_name=GetLastError]
native func get_last_error() -> Dword;

# --- ws2def.h ---

struct Sockaddr {
    var family: u16;
    var data: [u8; 14];   
}

struct Addrinfo {
    var flags: i32;
    var family: i32;
    var socktype: i32;
    var protocol: i32;
    var addrlen: usize;
    var canonname: *u8;
    var addr_: *Sockaddr;
    var next: *Addrinfo;
}

# --- winsock2.h ---

type Socket = u64;

const INVALID_SOCKET: u64 = 0xFFFFFFFFFFFFFFFF;
const SOCKET_ERROR: i32 = -1;

const AF_UNSPEC: i32 = 0;
const AF_INET: i32 = 2;
const AF_IPX: i32 = 6;
const AF_APPLETALK: i32 = 16;
const AF_NETBIOS: i32 = 17;
const AF_INET6: i32 = 23;
const AF_IRDA: i32 = 26;
const AF_BTH: i32 = 32;

const SOCK_STREAM: i32 = 1;
const SOCK_DGRAM: i32 = 2;
const SOCK_RAW: i32 = 3;
const SOCK_RDM: i32 = 4;
const SOCK_SEQPACKET: i32 = 5;

const IPPROTO_ICMP: i32 = 1;
const IPPROTO_IGMP: i32 = 2;
const BTHPROTO_RFCOMM: i32 = 3;
const IPPROTO_TCP: i32 = 6;
const IPPROTO_UDP: i32 = 17;
const IPPROTO_ICMPV6: i32 = 58;
const IPPROTO_RM: i32 = 113;

const SD_RECEIVE: i32 = 0;
const SD_SEND: i32 = 1;
const SD_BOTH: i32 = 2;

const FIONBIO: u32 = 0x8004667E;

@[link_name=WSAStartup]
native func wsa_startup(
    version_required: Word,
    wsa_data: addr
) -> i32;

@[link_name=socket]
native func socket(
    af: i32,
    type_: i32,
    protocol: i32
) -> Socket;

@[link_name=connect]
native func connect(
    s: Socket,
    name: *Sockaddr,
    namelen: i32
) -> i32;

@[link_name=send]
native func send(
    s: Socket,
    buf: *u8,
    len: i32,
    flags: i32
) -> i32;

@[link_name=recv]
native func recv(
    s: Socket,
    buf: *u8,
    len: i32,
    flags: i32
) -> i32;

@[link_name=shutdown]
native func shutdown(
    s: Socket,
    how: i32
) -> i32;

@[link_name=closesocket]
native func closesocket(s: Socket) -> i32;

@[link_name=ioctlsocket]
native func ioctlsocket(
    s: Socket,
    cmd: u32,
    argp: *u32
) -> i32;

# --- ws2tcpip.h ---

@[link_name=getaddrinfo]
native func getaddrinfo(
    node_name: *u8,
    service_name: *u8,
    hints: *Addrinfo,
    result: **Addrinfo
) -> i32;

@[link_name=freeaddrinfo]
native func freeaddrinfo(addr_info: *Addrinfo);
