type Bool = u32;
type Handle = addr;
type Dword = u32;
type LargeInteger = u64;

# --- handleapi.h ---

@[link_name=CloseHandle]
native func close_handle(object: Handle) -> bool;

# --- winbase.h ---

const FORMAT_MESSAGE_ALLOCATE_BUFFER: u32 = 0x00000100;
const FORMAT_MESSAGE_ARGUMENT_ARRAY: u32 = 0x00002000;
const FORMAT_MESSAGE_FROM_HMODULE: u32 = 0x00000800;
const FORMAT_MESSAGE_FROM_STRING: u32 = 0x00000400;
const FORMAT_MESSAGE_FROM_SYSTEM: u32 = 0x00001000;
const FORMAT_MESSAGE_IGNORE_INSERTS: u32 = 0x00000200;

@[link_name=LocalFree]
native func local_free(mem: addr) -> addr;

@[link_name=FormatMessageA]
native func format_message(
	flags: Dword,
	source: addr,
	message_id: Dword,
	language_id: Dword,
	buffer: **u8,
	size: Dword,
	arguments: addr
) -> u32;

# --- minwinbase.h ---

struct Filetime {
    var low_date_time: u32;
    var high_date_time: u32;
}

# --- synchapi.h ---

@[link_name=WaitForSingleObject]
native func wait_for_single_object(
    handle: addr,
    milliseconds: u32
) -> u32;

@[link_name=Sleep]
native func sleep(milliseconds: u32);

# --- processthreadsapi.h ---

@[link_name=CreateThread]
native func create_thread(
    thread_attributes: addr,
    stack_size: usize,
    start_address: func(addr),
    parameter: addr,
    creation_flags: u32,
    thread_id: *u32
) -> addr;

# --- sysinfoapi.h ---

struct SystemInfo {
    var union_0: u32;
    var page_size: u32;
    var minimum_application_dddress: addr;
    var maximum_application_dddress: addr;
    var active_processor_mask: *u32;
    var number_of_processors: u32;
    var processor_type: u32;
    var allocation_granularity: u32;
    var processor_level: u16;
    var processor_revision: u16;
}

@[link_name=GetNativeSystemInfo]
native func get_native_system_info(system_info: *SystemInfo);

@[link_name=GetSystemTimeAsFileTime]
native func get_system_time_as_file_time(system_time_as_file_time: *Filetime);

# --- profileapi.h ---

@[link_name=QueryPerformanceCounter]
native func query_performance_counter(performance_count: *LargeInteger) -> bool;

@[link_name=QueryPerformanceFrequency]
native func query_performance_frequency(frequency: *LargeInteger) -> bool;

# --- errhandlingapi.h ---

@[link_name=GetLastError]
native func get_last_error() -> Dword;