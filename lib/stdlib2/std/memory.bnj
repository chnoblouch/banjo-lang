use c.lib.{
    stdlib.{malloc as cmalloc, realloc as crealloc, free as cfree},
    string.{memcpy as cmemcpy, memset as cmemset}
};

pub func alloc(size: usize) -> addr {
    var pointer = cmalloc(size);
    return pointer;
}

pub func realloc(pointer: addr, size: usize) -> addr {
    return crealloc(pointer, size);
}

pub func free(pointer: addr) {
    cfree(pointer);
}

pub func copy(src: addr, dst: addr, size: usize) {
    cmemcpy(dst, src, size);
}

pub func alloc_box[T]() -> *T {
	return alloc(meta(T).size) as *T;
}

pub func zero[T]() -> T {
	var value: T;
	cmemset(&value as addr, 0, meta(T).size);
	return value;
}

struct PointerIter[T] {
    var pointer: *T;
    var end: *T;
    
    pub func new(pointer: *T, end: *T) -> PointerIter[T] {
        return PointerIter[T] { pointer, end };
    }
    
    func __next__(self) -> ?T {
        if self.pointer == self.end {
            return none;
        }
        
        var value = *self.pointer;
        self.pointer += 1;
        return value;
    }
}
