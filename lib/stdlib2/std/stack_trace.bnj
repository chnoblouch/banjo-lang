use std.{memory, config};
use c.lib.string.{strcmp, strncmp};
use internal.runtime;

native func printf(format: *u8, value: u64);

pub func print_stack_trace() {
    meta if config.OS == config.WINDOWS {
        var frames: *runtime.StackFrame;
        var num_frames: u32;
        runtime.acquire_stack_trace(&frames, &num_frames);
        
        println("stack trace:");
        
        for i in 2..num_frames {
            var frame = frames[i];
            printf("  0x%016llX: ", frame.address as u64);
            
            if strncmp(&frame.symbol[0], "bnj_", 4) == 0 {
                print("\x1B[0;36m");
                print_symbol_demangled(frame.symbol);
            } else if strcmp(frame.symbol, "main") == 0 {
                print("\x1B[0;36m");
                println(frame.symbol);
            } else {
                print("\x1B[0;2m");
                println(frame.symbol);
            }
            
            print("\x1B[0;0m");
        }
        
        memory.free(frames as addr);
    }
}

func print_symbol_demangled(symbol: *u8) {
    # TODO: actually demangle
    println(&symbol[4]);
}