use os.{IS_WINDOWS, winapi, msvcrt};
use std.convert.to_string;

meta if IS_WINDOWS {
    type Error = winapi.Dword;
    type Socket = winapi.Socket;

    const SOCKET_INVALID: Socket = winapi.INVALID_SOCKET;
    const SOCKET_ADDRESS_FAMILY_IPV4: i32 = winapi.AF_INET;
    const SOCKET_ADDRESS_FAMILY_IPV6: i32 = winapi.AF_INET6;
    const SOCKET_TYPE_STREAM: i32 = winapi.SOCK_STREAM;
    const SOCKET_TYPE_DATAGRAM: i32 = winapi.SOCK_DGRAM;
    const SOCKET_PROTOCOL_TCP: i32 = winapi.IPPROTO_TCP;
    const SOCKET_PROTOCOL_UDP: i32 = winapi.IPPROTO_UDP;
    
    var wsa_intialized: bool = false;

    pub func error_last() -> Error {
        return winapi.get_last_error();
    }

    pub func error_to_string(error: Error) -> String {
        var buffer: *u8 = null;
		
		var length = winapi.format_message(
			winapi.FORMAT_MESSAGE_ALLOCATE_BUFFER | winapi.FORMAT_MESSAGE_FROM_SYSTEM | winapi.FORMAT_MESSAGE_IGNORE_INSERTS,
			null,
			error,
			0x400,  # MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT)
			&buffer,
			0,
			null
		);
		
		var trimmed_length = length as usize - 2;
		var string = String.from((buffer, trimmed_length));
		winapi.local_free(buffer);
		
        return string;
    }

    pub func io_get_stdin_stream() -> addr {
        return msvcrt.acrt_iob_func(0);
    }

    pub func io_get_stdout_stream() -> addr {
        return msvcrt.acrt_iob_func(1);
    }

    pub func io_get_stderr_stream() -> addr {
        return msvcrt.acrt_iob_func(2);
    }

    pub func thread_spawn(function: func(addr), argument: addr) -> usize {
		var handle = winapi.create_thread(null, 0, function, argument, 0, null);
		return handle as usize;
	}

	pub func thread_join(handle: usize) {
		winapi.wait_for_single_object(handle as addr, 0xFFFFFFFF);
	}

	pub func thread_close(handle: usize) {
		winapi.close_handle(handle as addr);
	}

	pub func thread_sleep(milliseconds: u32) {
		winapi.sleep(milliseconds);
	}

	pub func thread_hardware_concurrency() -> u32 {
		var system_info: winapi.SystemInfo;
		winapi.get_native_system_info(&system_info);
		return system_info.number_of_processors;
	}

    pub func time_system_ticks() -> u64 {
        var time: winapi.Filetime;
        winapi.get_system_time_as_file_time(&time);
        return time.low_date_time as u64 | (time.high_date_time as u64 << 32);
    }
    
    pub func time_system_frequency() -> u64 {
        return 10000000;
    }
    
    pub func time_system_ticks_since_unix_epoch() -> u64 {
        return 116444736000000000;
    }

    pub func time_monotonic_ticks() -> u64 {
        var counter: u64;
        winapi.query_performance_counter(&counter);
        return counter;
    }

    pub func time_monotonic_frequency() -> u64 {
        var frequency: u64;
        winapi.query_performance_frequency(&frequency);
        return frequency;
    }

    pub func socket_create(address_family: i32, socket_type: i32, protocol: i32) -> Socket {
        if !wsa_intialized {            
            var wsa_version: u16 = 514;  # MAKEWORD(2, 2)
            var wsa_data: [u8; 512] = undefined;
            winapi.wsa_startup(wsa_version, &wsa_data);
        
            wsa_intialized = true;
        }

        return winapi.socket(address_family, socket_type, protocol);
    }

    pub func socket_set_blocking(socket: Socket, blocking: bool) {
        var value: u32;
    
        if blocking {
            value = 0;
        } else {
            value = 1;
        }

        winapi.ioctlsocket(socket, winapi.FIONBIO, &value);
    }

    pub func socket_connect(socket: Socket, host: String, port: u32) -> bool {
        var result: i32;
        
        var addr_hints = winapi.Addrinfo {
            flags: 0,
            family: 0,
            socktype: 0,
            protocol: 0,
            addrlen: 0,
            canonname: null,
            addr_: null,
            next: null,
        };

        var addr_info: *winapi.Addrinfo;
        result = winapi.getaddrinfo(host.cstr(), to_string(&port).cstr(), &addr_hints, &addr_info);
        if result != 0 {
            return false;
        }

        result = winapi.connect(socket, addr_info.addr_, addr_info.addrlen as i32);
        if result != 0 {
            return false;
        }

        winapi.freeaddrinfo(addr_info);
    }

    pub func socket_send(socket: Socket, buffer: *u8, size: usize) -> usize except Error {
        var result = winapi.send(socket, buffer, size as i32, 0);
        if result >= 0 {
            return result as usize;
        } else {
            return error_last();
        }
    }

    pub func socket_recv(socket: Socket, buffer: *u8, size: usize) -> usize except Error {
        var result = winapi.recv(socket, buffer, size as i32, 0);
        if result >= 0 {
            return result as usize;
        } else {
            return error_last();
        }
    }

    pub func socket_close(socket: Socket) {
        winapi.shutdown(socket, winapi.SD_BOTH);
        winapi.closesocket(socket);
    }
}
