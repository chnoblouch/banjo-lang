use os.{IS_UNIX, posix};
use std.{memory, convert.to_string, system.panic};

meta if IS_UNIX {
    type Error = i32;
    type Mutex = *posix.PthreadMutex;
    type Socket = i32;

    const SOCKET_INVALID: Socket = -1;
    const SOCKET_ADDRESS_FAMILY_IPV4: i32 = posix.AF_INET;
    const SOCKET_ADDRESS_FAMILY_IPV6: i32 = posix.AF_INET6;
    const SOCKET_TYPE_STREAM: i32 = posix.SOCK_STREAM;
    const SOCKET_TYPE_DATAGRAM: i32 = posix.SOCK_DGRAM;
    const SOCKET_PROTOCOL_TCP: i32 = posix.IPPROTO_TCP;
    const SOCKET_PROTOCOL_UDP: i32 = posix.IPPROTO_UDP;

    pub func error_last() -> Error {
        return posix.errno();
    }
    
    pub func error_to_string(error: Error) -> String {
        return String.from_cstr(posix.strerror(error));
    }

    pub func io_get_stdin_stream() -> addr {
        return posix.stdin;
    }

    pub func io_get_stdout_stream() -> addr {
        return posix.stdout;
    }

    pub func io_get_stderr_stream() -> addr {
        return posix.stderr;
    }

    pub func thread_spawn(function: func(addr), argument: addr) -> usize {
        var handle: usize;
        var result = posix.pthread_create(&handle, null, function, argument);
        return handle;
    }

    pub func thread_join(handle: usize) {
        var result = posix.pthread_join(handle, null);
    }

    pub func thread_close(handle: usize) {
        # `join` already destroys the handle.
    }

    pub func thread_sleep(milliseconds: u32) {
        var time = posix.Timespec {
            tv_sec: (milliseconds / 1000) as u64,
            tv_nsec: (milliseconds % 1000) as u64 * 1000000
        };
        
        posix.nanosleep(&time, null);
    }

    pub func thread_hardware_concurrency() -> u32 {
        return posix.get_nprocs() as u32;
    }

    pub func mutex_create() -> Mutex {
        var mutex = memory.alloc_box[posix.PthreadMutex]();
        
        if posix.pthread_mutex_init(mutex, null) != 0 {
            panic("failed to create mutex");
        }

        return mutex;
    }

    pub func mutex_lock(mutex: Mutex) {
        if posix.pthread_mutex_lock(mutex) != 0 {
            panic("failed to lock mutex");
        }
    }

    pub func mutex_unlock(mutex: Mutex) {
        if posix.pthread_mutex_unlock(mutex) != 0 {
            panic("failed to lock mutex");
        }
    }

    pub func mutex_destroy(mutex: Mutex) {
        if posix.pthread_mutex_destroy(mutex) != 0 {
            panic("failed to destroy mutex");
        }

        memory.free(mutex);
    }

    pub func time_system_ticks() -> u64 {
        var time: posix.Timespec;
        posix.clock_gettime(posix.CLOCK_REALTIME, &time);
        return 1000000000 * time.tv_sec + time.tv_nsec;
    }
    
    pub func time_system_frequency() -> u64 {
        return 1000000000;
    }
    
    pub func time_system_ticks_since_unix_epoch() -> u64 {
        return 0;
    }

    pub func time_monotonic_ticks() -> u64 {
        var time: posix.Timespec;
        posix.clock_gettime(posix.CLOCK_MONOTONIC, &time);
        return 1000000000 * time.tv_sec + time.tv_nsec;
    }

    pub func time_monotonic_frequency() -> u64 {
        return 1000000000;
    }

    pub func socket_create(address_family: i32, socket_type: i32, protocol: i32) -> Socket {
        return posix.socket(address_family, socket_type, protocol);
    }

    pub func socket_set_blocking(socket: Socket, blocking: bool) {
        # TODO
        panic("unimplemented on this platform");
    }

    pub func socket_connect(socket: Socket, host: String, port: u32) -> bool {
        var result: i32;
        
        var addr_hints = posix.Addrinfo {
            flags: 0,
            family: 0,
            socktype: 0,
            protocol: 0,
            addrlen: 0,
            addr_: null,
            canonname: null,
            next: null,
        };

        var host_cstring = host.to_cstring();
        var port_cstring = to_string(&port).to_cstring();

        var addr_info: *posix.Addrinfo;
        result = posix.getaddrinfo(host_cstring.data, port_cstring.data, &addr_hints, &addr_info);
        if result != 0 {
            return false;
        }

        result = posix.connect(socket, addr_info.addr_, addr_info.addrlen);
        posix.freeaddrinfo(addr_info);
        return result == 0;
    }

    pub func socket_send(socket: Socket, buffer: *u8, size: usize) -> usize except Error {
        var result = posix.send(socket, buffer, size, 0);
        if result >= 0 {
            return result as usize;
        } else {
            return error_last();
        }
    }

    pub func socket_recv(socket: Socket, buffer: *u8, size: usize) -> usize except Error {
        var result = posix.recv(socket, buffer, size, 0);
        if result >= 0 {
            return result as usize;
        } else {
            return error_last();
        }
    }

    pub func socket_close(socket: Socket) {
        posix.shutdown(socket, posix.SHUT_RDWR);
        posix.close(socket);
    }
}
