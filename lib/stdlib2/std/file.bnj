use std.{path.Path, memory};
use c.lib.stdio.{fopen, fseek, ftell, fread, fclose, SEEK_END, SEEK_SET};

enum FileMode {
    READ,
    WRITE,
    APPEND,
    READ_WRITE,
    READ_WRITE_ERASE,
    READ_APPEND
}

struct File {
    var stream: addr;
    
    pub func open(path: Path, mode: FileMode) -> File {
        var c_mode: *u8;
        
        if mode == FileMode.READ { c_mode = "rb"; }
        else if mode == FileMode.WRITE { c_mode = "wb"; }
        else if mode == FileMode.APPEND { c_mode = "ab"; }
        else if mode == FileMode.READ_WRITE { c_mode = "r+b"; }
        else if mode == FileMode.READ_WRITE_ERASE { c_mode = "w+b"; }
        else if mode == FileMode.READ_APPEND { c_mode = "a+b"; }
    
        var stream = fopen(path.str().cstr(), c_mode);
        # if stream == null {
        #     return Error.last();
        # }
        
        return File {
            stream
        };
    }
    
    pub func open(path: String) -> File {
        return open(Path.from(path), FileMode.READ);
    }
    
    # pub func reader(self) -> Reader {
    #     return Reader { stream: self.os_file };
    # }
    
    # pub func writer(self) -> Writer {
    #     return Writer { stream: self.os_file };
    # }
    
    pub func read(self) -> (*u8, usize) {    
        fseek(self.stream, 0, SEEK_END);
        var size = ftell(self.stream) as usize;
        fseek(self.stream, 0, SEEK_SET);
        
        var data = memory.alloc(size) as *u8;
        fread(data as addr, 1, size as u64, self.stream);
        
        return (data, size);
    }
    
    # pub func read_str(self) -> *u8 {
    #     var os_file = self.os_file;
    
    #     fseek(os_file, 0, SEEK_END);
    #     var size = ftell(os_file);
    #     fseek(os_file, 0, SEEK_SET);
        
    #     var alloc_size = (size + 1) as usize;
    #     var string = memory.alloc(alloc_size) as *u8;
    #     fread(string as addr, 1 as u64, size as u64, os_file);
        
    #     string[size] = 0;
        
    #     return string;
    # }
    
    func __deinit__(self) {
        fclose(self.stream);
    }
}
