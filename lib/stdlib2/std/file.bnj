use std.{
    platform,
    memory,
    path.Path,
    io.{Reader, Writer, CFileReader, CFileWriter, Error},
};

use c.lib.stdio.{fopen, fseek, ftell, fread, fclose, SEEK_END, SEEK_SET};

enum FileMode {
    READ,
    WRITE,
    APPEND,
    READ_WRITE,
    READ_WRITE_ERASE,
    READ_APPEND
}

struct File {
    var stream: addr;
    
    pub func open(path: Path, mode: FileMode) -> File except Error {
        var c_mode: *u8;
        
        if mode == FileMode.READ { c_mode = "rb"; }
        else if mode == FileMode.WRITE { c_mode = "wb"; }
        else if mode == FileMode.APPEND { c_mode = "ab"; }
        else if mode == FileMode.READ_WRITE { c_mode = "r+b"; }
        else if mode == FileMode.READ_WRITE_ERASE { c_mode = "w+b"; }
        else if mode == FileMode.READ_APPEND { c_mode = "a+b"; }
    
        var stream = fopen(path.str().cstr(), c_mode);
        if stream == null {
            return Error.last();
        }

        return File {
            stream
        };
    }
    
    pub func open(path: String) -> File except Error {
        return open(Path.from(path), FileMode.READ);
    }
    
    pub func reader(self) -> Reader[CFileReader] {
        return Reader[CFileReader] {
            impl: CFileReader {
                stream: self.stream,
            }
        };
    }
    
    pub func writer(self) -> Writer[CFileWriter] {
        return Writer[CFileWriter] {
            impl: CFileWriter {
                stream: self.stream,
            }
        };
    }
    
    pub func read(self) -> (*u8, usize) {    
        fseek(self.stream, 0, SEEK_END);
        var size = ftell(self.stream) as usize;
        fseek(self.stream, 0, SEEK_SET);
        
        var data = memory.alloc(size) as *u8;
        fread(data, 1, size, self.stream);
        
        return (data, size);
    }

    pub func read_as_string(self) -> String {
        fseek(self.stream, 0, SEEK_END);
        var size = ftell(self.stream) as usize;
        fseek(self.stream, 0, SEEK_SET);
        
        var data = memory.alloc(size + 1) as *u8;
        fread(data, 1, size, self.stream);
        data[size] = '\0';

        return String {
            data,
            length: size as u32,
            capacity: size as u32 + 1,
        };
    }
    
    func __deinit__(self) {
        fclose(self.stream);
    }
}
