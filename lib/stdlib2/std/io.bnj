use std.platform;
use c.lib.stdio.{fread, ferror, fgetc, fputc, fwrite, fflush};

struct Error {
    var handle: platform.Error;
    
    pub func last() -> Error {
        return Error {
            handle: platform.error_last(),
        };
    }
    
    pub func __str__(self) -> String {
        return platform.error_to_string(self.handle);
    }
}

struct Reader[T] {
    var impl: T;

    pub func new(impl: T) -> Reader[T] {
        return Reader[T] { impl };
    }

    pub func read_u8(self) -> ?u8 {
        var value: u8;
        if self.impl.read(&value as *u8, 1) != 0 {
            return value;
        } else {
            return none;
        }
    }

    pub func read_line(self) -> ?String {
        var string = "";
        var char = self.read_u8();
        
        if !char.has_value {
            return none;
        }
        
        while char.value != '\n' && char.value != '\r' {
            string.append(char.value);
            char = self.read_u8();
            
            if !char.has_value {
                return none;
            }
        }
        
        return string;
    }
}

struct Writer[T] {
    var impl: T;

    pub func new(impl: T) -> Writer[T] {
        return Writer[T] { impl };
    }

    pub func write(self, buffer: *u8, size: usize) {
        self.impl.write(buffer, size);
    }

    pub func write(self, byte: u8) {
        self.impl.write(byte);
    }

    pub func write(self, string: String) {
        self.impl.write(string.data, string.length as usize);
    }

    pub func flush(self) {
        self.impl.flush();
    }
}

struct CFileReader {
    var stream: addr;

    pub func new(stream: addr) -> CFileReader {
        return CFileReader { stream };
    }

    pub func read(self, buffer: *u8, size: usize) -> usize {
        return fread(buffer, 1, size, self.stream);
    }
}

struct CFileWriter {
    var stream: addr;

    pub func new(stream: addr) -> CFileWriter {
        return CFileWriter { stream };
    }

    pub func write(self, buffer: *u8, size: usize) {
        fwrite(buffer, size, 1, self.stream);
    }

    pub func write(self, byte: u8) {
        fputc(byte as i32, self.stream);
    }

    pub func flush(self) {
        fflush(self.stream);
    }
}

pub func stdin() -> Reader[CFileReader] {
    var stream = platform.io_get_stdin_stream();
    return Reader[CFileReader].new(CFileReader.new(stream));
}

pub func stdout() -> Writer[CFileWriter] {
    var stream = platform.io_get_stdout_stream();
    return Writer[CFileWriter].new(CFileWriter.new(stream));
}
