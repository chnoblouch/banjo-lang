use std.{system.exit, memory, convert.str};

native func ___banjo_print_string(format: *u8, string: *u8);
native func ___banjo_print_address(format: *u8, address: addr);

func print[T](value: T) {
	meta if type(T) == type(String) {
		___banjo_print_string("%s", value.cstr());
	} else if type(T) == type(addr) {
		___banjo_print_address("0x%p", value);
	} else {
		var string = str(value);
		___banjo_print_string("%s", string.cstr());
	}
}

pub func println[T](value: T) {
	meta if type(T) == type(String) {
		___banjo_print_string("%s\n", value.cstr());
	} else if type(T) == type(addr) {
		___banjo_print_address("0x%p\n", value);
	} else {
		var string = str(value);
		___banjo_print_string("%s\n", string.cstr());
	}
}

func assert(cond: bool, message: String) {
	if !cond {
        var string = String.concat("assertion failed: ", message); 
		panic(string);
		exit(1);
	}
}