use std.{memory, config, path.Path, convert.str};
use c.lib.string.strcmp;

meta if config.OS == config.WINDOWS {
    struct FILETIME {
        var dwLowDateTime: u32;
        var dwHighDateTime: u32;
    }
    
    # TODO: incorrect size?
    struct WIN32_FIND_DATA {
        var dwFileAttributes: u32;
        var ftCreationTime: FILETIME;
        var ftLastAccessTime: FILETIME;
        var ftLastWriteTime: FILETIME;
        var nFileSizeHigh: u32;
        var nFileSizeLow: u32;
        var dwReserved0: u32;
        var dwReserved1: u32;
        var cFileName: [u8; 260];
        var cAlternateFileName: [u8; 14];
    }

    const MAX_PATH: u32 = 260;
    
	native func PathFileExistsA(pszPath: *u8) -> bool;
	native func GetCurrentDirectoryA(nBufferLength: u32, lpBuffer: *u8) -> u32;
	native func SetCurrentDirectoryA(lpPathName: *u8) -> bool;
    native func FindFirstFileA(lpFileName: *u8, lpFindFileData: *WIN32_FIND_DATA) -> addr;
    native func FindNextFileA(hFindFile: addr, lpFindFileData: *WIN32_FIND_DATA) -> bool;
    native func FindClose(hFindFile: addr) -> bool;

	pub func exists(path: *u8) -> bool {
		return PathFileExistsA(path);
	}

    pub func list_dir(path: *Path) -> [Path] {
        var pattern = path.str().copy();
        pattern.append_str("\\*");        
        
        var find_data: WIN32_FIND_DATA;
        var handle = FindFirstFileA(pattern.cstr(), &find_data);
        if handle == -1 as addr {
            return [];
        }
        
        var paths: [Path] = [];
        var is_data_valid = true;
        
        while is_data_valid {
            var cstr = &find_data.cFileName[0] as *u8;
            if strcmp(cstr, ".") != 0 && strcmp(cstr, "..") != 0 {
                paths.append(Path.from(str(cstr)));
            }
            
            is_data_valid = FindNextFileA(handle, &find_data);
        }
        
        FindClose(handle);
        return paths;
    }

	pub func current_dir() -> *u8 {
		var size = GetCurrentDirectoryA(0 as u32, null as *u8);
		var buffer = memory.alloc(size as usize) as *u8;
		GetCurrentDirectoryA(size, buffer);
		return buffer;
	}

	pub func set_current_dir(dir: *u8) {
		SetCurrentDirectoryA(dir);
	}
}