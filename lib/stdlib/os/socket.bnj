use std.{config, memory};

meta if config.OS == config.WINDOWS {
	use winapi.winsock;
    
    type SocketHandle = i32;
    const INVALID_SOCKET: i32 = -1;
} else if config.OS == config.LINUX || config.OS == config.MACOS {
    type SocketHandle = i32;
    const INVALID_SOCKET: i32 = -1;
    
    type InAddr = u32;
    
    struct SockAddrIn {
        var sin_family: u16;
        var sin_port: u16;
        var sin_addr: InAddr;
        var sin_zero: [u8; 8];
    }
    
    @[link_name=inet_addr] native func c_inet_addr(cp: *u8) -> InAddr;
    
    # FIXME: hostshort is supposed to be u16, but the compiler doesn't handle u16s correctly at the moment.
    @[link_name=htons] native func c_htons(hostshort: u32) -> u16;
    
    @[link_name=socket] native func c_socket(domain: i32, type_: i32, protocol: i32) -> i32;
    @[link_name=connect] native func c_connect(fd: i32, addr_: *SockAddrIn, len: u32) -> i32;
}

const AF_INET: i32 = 2;
const AF_INET6: i32 = 23;
const SOCK_STREAM: i32 = 1;
const SOCK_DGRAM: i32 = 2;
const AI_PASSIVE: i32 = 0x01;

meta if config.OS == config.WINDOWS {
    var wsa_initialized: bool = false;

    func wsa_init() {
		var wsa_data = memory.alloc(1024 as usize);
		var version = 514 as i16;  # MAKEWORD(2, 2)
		var result = winsock.WSAStartup(version, wsa_data);
		
		if result != 0 {
			println("WSAStartup() failed!");
			println(result);
		}
	}
}

pub func new(domain: i32, ty: i32) -> ?SocketHandle {
    meta if config.OS == config.WINDOWS {
        if !wsa_initialized {
			wsa_init();
            wsa_initialized = true;
		}
        
        var handle = winsock.socket(domain, ty, 0);
    } else {
        var handle = c_socket(domain, ty, 0);
    }
        
    if handle != INVALID_SOCKET {
        return handle;
    } else {
        return none;
    }
}

pub func connect(handle: SocketHandle, host: *u8, port: i32) {
    meta if config.OS == config.WINDOWS {
        var port_string = String.from(port as i64);
    
        var hints = winsock.addrinfo {
            ai_flags: 0,
            ai_family: 0,
            ai_socktype: 0,
            ai_protocol: 0,
            ai_addrlen: 0,
            ai_canonname: null,
            ai_addr: null,
            ai_next: null
        };
        
        var info: *winsock.addrinfo;
        var result = winsock.getaddrinfo(host, port_string.cstr(), &hints, &info);
        
        winsock.connect(handle, info.ai_addr, info.ai_addrlen as i32);
        winsock.freeaddrinfo(info);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        var sockaddr = SockAddrIn {
            sin_family: AF_INET as u16,
            sin_port: c_htons(port as u32),
            sin_addr: c_inet_addr(host),
            sin_zero: undefined
        };
        
        c_connect(handle, &sockaddr, meta.size(SockAddrIn) as u32);
    }
}

pub func recv(handle: SocketHandle, buffer: *u8, length: u32) -> i32 {
    meta if config.OS == config.WINDOWS {
        return winsock.recv(handle, buffer, length as i32, 0);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func send(handle: SocketHandle, buffer: *u8, length: u32) {
    meta if config.OS == config.WINDOWS {
        winsock.send(handle, buffer, length as i32, 0);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func bind(handle: SocketHandle, host: *u8, port: i32) {
    meta if config.OS == config.WINDOWS {
        var port_string = String.from(port as i64);
    
        var hints = winsock.addrinfo {
            ai_flags: 0,
            ai_family: 0,
            ai_socktype: 0,
            ai_protocol: 0,
            ai_addrlen: 0,
            ai_canonname: null,
            ai_addr: null,
            ai_next: null
        };
        
        var info: *winsock.addrinfo;
        var result = winsock.getaddrinfo(host, port_string.cstr(), &hints, &info);
        
        winsock.bind(handle, info.ai_addr, info.ai_addrlen as i32);    
        winsock.freeaddrinfo(info);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func listen(handle: SocketHandle, port: i32) {
    meta if config.OS == config.WINDOWS {
        winsock.listen(handle, port);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func accept(handle: SocketHandle) -> SocketHandle {
    meta if config.OS == config.WINDOWS {
        return winsock.accept(handle, null, null as *i32);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func set_blocking(handle: SocketHandle, blocking: bool) {
    var value: u32;
    
    if blocking {
        value = 0;
    } else {
        value = 1;
    }
    
    meta if config.OS == config.WINDOWS {
        winsock.ioctlsocket(handle, winsock.FIONBIO, &value as addr);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}

pub func deinit(handle: SocketHandle) {
    meta if config.OS == config.WINDOWS {
        winsock.shutdown(handle, winsock.SD_BOTH);
        winsock.closesocket(handle);
    } else if config.OS == config.LINUX || config.OS == config.MACOS {
        panic("not implemented");
    }
}