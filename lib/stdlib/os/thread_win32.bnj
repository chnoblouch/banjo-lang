use std.config;

meta if config.OS == config.WINDOWS {
	struct SYSTEMINFO {
		var union_0: u32;
		var dwPageSize: u32;
		var lpMinimumApplicationAddress: addr;
		var lpMaximumApplicationAddress: addr;
		var dwActiveProcessorMask: *u32;
		var dwNumberOfProcessors: u32;
		var dwProcessorType: u32;
		var dwAllocationGranularity: u32;
		var wProcessorLevel: u16;
		var wProcessorRevision: u16;
	}

	native func CreateThread(
		lpThreadAttributes: addr,
		dwStackSize: usize,
		lpStartAddress: func(addr),
		lpParameter: addr,
		dwCreationFlags: u32,
		lpThreadId: *u32
	) -> addr;

	native func WaitForSingleObject(hHandle: addr, dwMilliseconds: u32) -> u32;
	native func CloseHandle(hObject: addr) -> bool;
	native func Sleep(dwMilliseconds: u32);
	native func GetNativeSystemInfo(lpSystemInfo: *SYSTEMINFO);

	pub func spawn(function: func(addr), argument: addr) -> usize {
		var handle = CreateThread(null, 0, function, argument, 0, null);
		return handle as usize;
	}

	pub func join(handle: usize) {
		WaitForSingleObject(handle as addr, 0xFFFFFFFF);
	}

	pub func close(handle: usize) {
		CloseHandle(handle as addr);
	}

	pub func sleep(milliseconds: u32) {
		Sleep(milliseconds);
	}

	pub func hardware_concurrency() -> u32 {
		var system_info: SYSTEMINFO;
		GetNativeSystemInfo(&system_info);
		return system_info.dwNumberOfProcessors;
	}
}