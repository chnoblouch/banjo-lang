use std.{platform, file.File};

use c.lib.{
    string.strlen,
    stdio.{fread, ferror, fgetc, fputc, fwrite, fflush},
};

proto Read {
    pub func read(self, data: Slice[u8]) -> usize except Error;

    pub func read_line(self) -> String {
        # TODO: Buffering, error handling

        var line = "";
        
        var char: u8;
        self.read(Slice[u8].new(&char, 1)).unwrap();

        while char != '\r' && char != '\n' {            
            line += char;
            self.read(Slice[u8].new(&char, 1)).unwrap();
        }

        return line;
    }
}

proto Write {
    pub func write(self, data: Slice[u8]) -> usize except Error;
    
    pub func write_string(self, string: StringSlice) -> usize except Error {
        return self.write(Slice[u8].new(string.data, string.length));
    }

    pub func write_cstring(self, data: *u8) -> usize except Error {
        var length = strlen(data);
        return self.write(Slice[u8].new(data, length));
    }
}

struct Error {
    var handle: platform.Error;
    
    pub func last() -> Error {
        return Error {
            handle: platform.error_last(),
        };
    }
    
    pub func __str__(self) -> String {
        return platform.error_to_string(self.handle);
    }
}

struct StandardInStream: Read {
    var file: File;

    pub func from(stream: addr) -> StandardInStream {
        return StandardInStream {
            file: File { stream },
        };
    }

    pub func read(self, data: Slice[u8]) -> usize except Error {
        return self.file.read(data);
    }
}

struct StandardOutStream: Write {
    var file: File;

    pub func from(stream: addr) -> StandardOutStream {
        return StandardOutStream {
            file: File { stream },
        };
    }

    pub func write(self, data: Slice[u8]) -> usize except Error {
        return self.file.write(data);
    }
}

pub func stdin() -> StandardInStream {
    return StandardInStream.from(platform.io_get_stdin_stream());
}

pub func stdout() -> StandardOutStream {
    return StandardOutStream.from(platform.io_get_stdout_stream());
}

pub func stderr() -> StandardOutStream {
    return StandardOutStream.from(platform.io_get_stderr_stream());
}
