use std.{
    platform,
    memory,
    path.Path,
    io.{Read, Write, Error},
};

use c.lib.stdio.{
    fopen,
    fseek,
    ftell,
    fread,
    fwrite,
    feof,
    fclose,
    fflush,
    SEEK_SET,
    SEEK_CUR,
    SEEK_END,
};

struct File: Read, Write {
    enum Mode {
        READ,
        WRITE,
        APPEND,
        READ_WRITE,
        READ_WRITE_ERASE,
        READ_APPEND,
    }

    enum SeekOrigin {
        START,
        END,
        CURRENT,
    }

    var stream: addr;
    
    pub func open(path: Path, mode: Mode) -> File except Error {
        var c_mode: *u8;
        
        if mode == Mode.READ { c_mode = "rb"; }
        else if mode == Mode.WRITE { c_mode = "wb"; }
        else if mode == Mode.APPEND { c_mode = "ab"; }
        else if mode == Mode.READ_WRITE { c_mode = "r+b"; }
        else if mode == Mode.READ_WRITE_ERASE { c_mode = "w+b"; }
        else if mode == Mode.READ_APPEND { c_mode = "a+b"; }
    
        var path_cstring = path.str().to_cstring();
        var stream = fopen(path_cstring.data, c_mode);
    
        if stream == null {
            return Error.last();
        }

        return File { stream };
    }
    
    pub func open(path: String) -> File except Error {
        return open(Path.from(path), Mode.READ);
    }
    
    pub func read(self, data: Slice[u8]) -> usize except Error {
        var result = fread(data.elements, 1, data.length, self.stream);

        if result == data.length || feof(self.stream) != 0 {
            return result;
        } else {
            return Error.last();
        }
    }
    
    pub func write(self, data: Slice[u8]) -> usize except Error {
        var result = fwrite(data.elements, 1, data.length, self.stream);

        if result == data.length {
            return result;
        } else {
            return Error.last();
        }
    }

    pub func position(self) -> u64 except Error {
        # TODO: Actually support 64-bit offsets.

        var result = ftell(self.stream);

        if result != 0xFFFFFFFF {
            return result as u64;
        } else {
            return Error.last();
        }
    }

    pub func seek(self, offset: i64, origin: SeekOrigin) -> void except Error {
        # TODO: Actually support 64-bit offsets.

        var libc_origin: i32 = 0;

        if origin == SeekOrigin.START {
            libc_origin = SEEK_SET;
        } else if origin == SeekOrigin.END {
            libc_origin = SEEK_END;
        } else if origin == SeekOrigin.CURRENT {
            libc_origin = SEEK_CUR;
        }

        var result = fseek(self.stream, offset as i64, libc_origin);

        if result == 0 {
            return undefined;
        } else {
            return Error.last();
        }
    }

    pub func flush(self) {
        # TODO: Error handling

        fflush(self.stream);
    }

    pub func read_all(self) -> (*u8, usize) {    
        fseek(self.stream, 0, SEEK_END);
        var size = ftell(self.stream) as usize;
        fseek(self.stream, 0, SEEK_SET);
        
        var data = memory.alloc(size) as *u8;
        fread(data, 1, size, self.stream);
        
        return (data, size);
    }

    pub func read_as_string(self) -> String {
        fseek(self.stream, 0, SEEK_END);
        var size = ftell(self.stream) as usize;
        fseek(self.stream, 0, SEEK_SET);
        
        var data = memory.alloc(size) as *u8;
        fread(data, 1, size, self.stream);

        return String {
            slice: StringSlice.new(data, size),
            capacity: size + 1,
        };
    }
    
    func __deinit__(self) {
        fclose(self.stream);
    }
}
