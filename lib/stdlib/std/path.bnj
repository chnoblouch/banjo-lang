use os;

struct Path {
	var path: String;
	
	pub func new() -> Path {
		return Path { path: String.new() };
	}
	
	pub func from(str: String) -> Path {
		var path = Path { path: str };
        path.normalize();
        return path;
    }
	
	pub func append(self, component: String) {
		self.path.append('/');
		self.path.append_str(component);
	}
	
	pub func exists(self) -> bool {
		return os.path.exists(self.path.cstr());
	}
    
    pub func parent(self) -> Path {
        var index = self.path.rfind('/');
        return Path { path: self.path.substr(0, index as u32) };
    }
	
	pub func list_dir(self) -> [Path] {
		return os.path.list_dir(self);
	}
	
	pub func str(self) -> String {	
		return self.path.copy();
	}
    
    pub func __str__(self) -> String {
        return self.path.copy();
    }
	
	func normalize(self) {
		for i in 0..self.path.length {
            if self.path.data[i] == '\\' {
                self.path.data[i] = '/';
            }
        }
	}
}

pub func current_dir() -> Path {
	var cstr = os.path.current_dir();
	return Path.from(String.from(cstr));
}

pub func set_current_dir(path: Path) {
	var cstr = path.str().cstr();
	os.path.set_current_dir(cstr);
}