use std.platform;

struct Path {
    var path: String;
    
    pub func new() -> Path {
        return Path { path: "" };
    }
    
    pub func from[T](ref value: T) -> Path {
        meta if T == Path {
            var path = value.copy();
        } else if T == String {            
            var path = Path { path: value.copy() };
        } else if T == *u8 {
            var path = Path { path: String.from(value) };
        }
        
        path.normalize();
        return path;
    }
    
    pub func append(mut self, component: String) {
        self.path.append('/');
        self.path.append(component);
    }

    pub func file_name(self) -> String {
        # TODO: Error handling

        try last_separator in self.path.rfind('/') {
            return self.path.substring(last_separator + 1, self.path.length());
        } else {
            return self.path.copy();
        }
    }
    
    pub func parent(self) -> Path {
        # TODO: Error handling

        var last_separator = self.path.rfind('/').unwrap();
        return from(self.path.substring(0, last_separator));
    }

    pub func exists(self) -> bool {
        # TODO: Error handling
        return platform.path_exists(__builtin_pointer_to(self.path));
    }

    pub func is_file(self) -> bool {
        # TODO: Types other than regular files and directories, error handling
        return platform.path_is_file(__builtin_pointer_to(self.path));
    }

    pub func is_dir(self) -> bool {
        # TODO: Error handling
        return platform.path_is_dir(__builtin_pointer_to(self.path));
    }
    
    pub func list_dir(self) -> Array[Path] {
        # TODO: Error handling

        var file_names = platform.path_list_dir(__builtin_pointer_to(self.path));
        var paths = Array[Path].sized(file_names.length);

        var prefix = self.path.copy() + '/';

        for i in 0..file_names.length {
            paths[i] = Path.from(prefix.copy() + file_names[i].copy());
        }

        return paths;
    }
    
    pub func copy(self) -> Path {
        return Path { path: self.path.copy() };
    }

    pub func str(self) -> String {    
        return self.path.copy();
    }
    
    pub func __str__(self) -> String {
        return self.path.copy();
    }

    pub func __repr__(self, indent: u32) -> String {
        return self.path.__repr__(indent);
    }
    
    func normalize(mut self) {
        for i in 0..self.path.length() {
            if self.path.bytes()[i] == '\\' {
                self.path.bytes()[i] = '/';
            }
        }

        if self.path.bytes()[self.path.length() - 1] == '/' {
            self.path = self.path.substring(0, self.path.length() - 1);
        }
    }
}
