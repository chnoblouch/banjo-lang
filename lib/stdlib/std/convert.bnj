use std.memory;
use internal.runtime;

pub func to_string[T](value: *T) -> String {
    meta if T == String {
        return value.copy();
    } else if T == *u8 {
        return String.from(*value);
    } else if T == i8 || T == i16 || T == i32 || T == i64 {
        return i64_to_string(*value as i64);
    } else if T == u16 || T == u32 || T == u64 || T == usize {
        return u64_to_string(*value as u64);
    } else if T == f32 || T == f64 {
        return f64_to_string(*value as f64);
    } else if T == u8 {
        return char_to_string(*value);
    } else if T == bool {
        return bool_to_string(*value);
    } else if meta(T).has_method("__str__") {
        return value.__str__();
    } else if meta(T).is_struct {
        return struct_to_repr(value, 0);
    } else if meta(T).is_enum {
        return enum_to_repr(*value);
    } else {
        return "<?>";
    }
}

pub func to_repr[T](value: *T) -> String {
    return to_repr_indent(value, 0);
}

pub func to_repr_indent[T](value: *T, indent: u32) -> String {
    meta if T == String {
        return "\"" + value.copy() + "\"";
    } else if meta(T).has_method("__repr__") {
        return value.__repr__();
    } else if meta(T).is_struct {
        return struct_to_repr(value, indent);
    } else {
        return to_string(value);
    }
}

func i64_to_string(value: i64) -> String {
    var capacity: usize = 32;
    var data = memory.alloc(capacity) as *u8;
    var length: usize = 0;
    
    var remainder: u64;
    var negative: bool;
    
    if value >= 0 {
        remainder = value as u64;
        negative = false;
    } else {
        remainder = -value as u64;
        negative = true;
    }
    
    while true {
        data[length] = (remainder % 10) as u8 + '0';
        length += 1;
        remainder /= 10;
        
        if remainder == 0 { break; }
    }
    
    if negative {
        data[length] = '-';
        length += 1;
    }
    
    data[length] = 0;
    
    var string = String {
        slice: StringSlice.new(data, length),
        capacity,
    };

    string.reverse_in_place();
    return string;
}

func u64_to_string(value: u64) -> String {
    var capacity: usize = 32;
    var data = memory.alloc(capacity) as *u8;
    var length: usize = 0;
    
    var remainder = value;
    
    while true {
        data[length] = (remainder % 10) as u8 + '0';
        length += 1;
        remainder /= 10;
        
        if remainder == 0 { break; }
    }
    
    data[length] = 0;
    
    var string = String {
        slice: StringSlice.new(data, length),
        capacity,
    };

    string.reverse_in_place();
    return string;
}

func f64_to_string(value: f64) -> String {
    var buffer: [u8; 64];
    runtime.f64_to_string(value, &buffer[0], 64);
    return String.from(&buffer[0]);
}

func char_to_string(value: u8) -> String {
    var string = String.new();
    string.append(value);
    return string;
}

func bool_to_string(value: bool) -> String {
    if value {
        return "true";
    } else {
        return "false";
    }
}

func struct_to_repr[T](struct_: *T, indent: u32) -> String {
    var string = meta(T).name + " {\n";

    meta for field_name in meta(T).fields {    
        for i in 0..indent + 1 {
            string += "    ";
        }

        string += field_name;
        string += ": ";
        
        {
            var field = &meta(struct_).field(field_name);
            string += to_repr_indent(field, indent + 1);
        }

        string += ",\n";
    }

    for i in 0..indent {
        string += "    ";
    }

    string += '}';
    return string;
}

func enum_to_repr[T](enum_: T) -> String {
    var variant_name: String;
    
    meta for variant in meta(T).variants {
        # TODO: This cast to 'i32' should not be necessary.
        if enum_ as i32 == variant.1 {
            variant_name = variant.0;
        }
    }

    # TODO: Maybe don't include the enum name.
    return meta(T).name + "." + variant_name;
}