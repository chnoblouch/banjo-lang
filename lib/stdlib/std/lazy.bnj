struct Lazy[T] {
	var value: T;
	var initializer: || -> T;
	var initialized: bool;
	
	pub func new(initializer: || -> T) -> Lazy[T] {
		return Lazy[T] {
			initializer: initializer,
			initialized: false
		};
	}
	
	pub func init(self) {
		if !self.initialized {
			self.value = self.initializer();
			self.initializer = true;
		}
	}
	
	pub func deref(self) -> *T {
		self.init();
		return &self.value;
	}
}