use std.memory;
use c.lib.{string.{strlen, strcmp}, stdlib.{strtol, strtof}};

struct String {
    var slice: StringSlice;
    var capacity: usize;

    pub func new() -> String {
        return String {
            slice: StringSlice.new_empty(),
            capacity: 0,
        };
    }

    pub func from(cstr: *u8) -> String {
        return from_cstr(cstr);
    }

    pub func from(slice: StringSlice) -> String {
        var data = memory.alloc(slice.length) as *u8;
        memory.copy(slice.data, data, slice.length);

        return String {
            slice: StringSlice {
                data,
                length: slice.length,
            },
            capacity: slice.length,
        };
    }

    pub func from_cstr(cstr: *u8) -> String {
        return from(StringSlice.of_cstring(cstr));
    }

    pub func concat(a: String, b: String) -> String {
        var copy = a.copy();
        copy.append(b);
        return copy;
    }

    pub func __deinit__(self) {
        memory.free(self.slice.data);
    }

    pub func slice(self) -> StringSlice {
        return self.slice;
    }

    pub func bytes(self) -> *u8 {
        return self.slice.data;
    }

    pub func length(self) -> usize {
        return self.slice.length;
    }

    pub func copy(self) -> String {
        return String.from(self.slice);
    }

    pub func append(self, char: u8) {
        var new_length = self.slice.length + 1;
        self.ensure_capacity(new_length);
        self.slice.data[self.slice.length] = char;
        self.slice.length = new_length;
    }

    pub func append(self, slice: StringSlice) {
        var new_length = self.slice.length + slice.length;
        self.ensure_capacity(new_length);
        memory.copy(slice.data, &self.slice.data[self.slice.length], slice.length);
        self.slice.length = new_length;
    }

    pub func append(self, other: String) {
        self.append(other.slice);
    }

    pub func substring(self, start: usize, end: usize) -> String {
        return String.from(self.slice.substring(start, end));
    }

    pub func starts_with(self, other: StringSlice) -> bool {
        return self.slice.starts_with(other);
    }

    pub func ends_with(self, other: StringSlice) -> bool {
        return self.slice.ends_with(other);
    }

    pub func find(self, char: u8) -> ?usize {
        return self.slice.find(char);
    }

    pub func rfind(self, char: u8) -> ?usize {
        return self.slice.rfind(char);
    }

    pub func find(self, substr: StringSlice) -> ?usize {
        return self.slice.find(substr);
    }

    pub func to_cstring(self) -> Array[u8] {
        var size = self.slice.length + 1;
        var data = memory.alloc(size) as *u8;
        memory.copy(self.slice.data, data, self.slice.length);
        data[self.slice.length] = '\0';

        return Array[u8] {
            data,
            length: size,
            capacity: size,
        };
    }

    pub func to_i64(self) -> i64 {
        return self.slice.to_i64();
    }

    pub func __add__(self, rhs: String) -> String {
        return concat(self.copy(), rhs);
    }

    pub func __add__(self, rhs: u8) -> String {
        var copy = self.copy();
        copy.append(rhs);
        return copy;
    }

    pub func __eq__(self, rhs: StringSlice) -> bool {
        return self.slice == rhs;
    }

    pub func __eq__(self, ref rhs: String) -> bool {
        return self.slice == rhs.slice;
    }

    pub func __ne__(self, rhs: StringSlice) -> bool {
        return self.slice != rhs;
    }

    pub func __ne__(self, ref rhs: String) -> bool {
        return self.slice != rhs.slice;
    }

    pub func __str__(self) -> String {
        return self.slice.__str__();
    }

    pub func __repr__(self) -> String {
        return self.slice.__repr__();
    }

    pub func __hash__(self) -> u64 {
        return self.slice.__hash__();
    }

    func ensure_capacity(self, required: usize) {
        if self.capacity >= required {
            return;
        }

        if self.capacity == 0 {
            self.capacity = required;
        } else {
            while self.capacity < required {
                self.capacity = 2 * self.capacity;
            }
        }

        self.slice.data = memory.realloc(self.slice.data, self.capacity) as *u8;
    }

    func reverse_in_place(self) {
        for i1 in 0..self.slice.length / 2 {
            var i2 = self.slice.length - 1 - i1;

            var c1 = self.slice.data[i1];
            var c2 = self.slice.data[i2];

            self.slice.data[i1] = c2;
            self.slice.data[i2] = c1;
        }
    }
}
