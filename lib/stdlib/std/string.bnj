use std.{memory, io};
use c.lib.{string.{strlen, strcmp}, stdlib.{strtol, strtof}};

struct String {
	var data: *u8;
	var length: u32;
	var capacity: u32;
	
	pub func new() -> String {
		var data = memory.alloc(1 as usize) as *u8;
		data[0] = 0;
        
        # println("init string");
    
		return String {
			data: data,
			length: 0 as u32,
			capacity: 1 as u32
		};
	}
	
	pub func from(cstr: *u8) -> String {
		var length = strlen(cstr);
		var capacity = length + 1;
		var data = memory.alloc(capacity as usize) as *u8;
        
		memory.copy(cstr as addr, data as addr, capacity);
        
        # println("init string");
        
		return String {
			data: data,
			length: length as u32,
			capacity: capacity as u32
		};
	}
	
	pub func copy(slice: StringSlice) -> String {
		var capacity = slice.length as u32 + 1;
		var data = memory.alloc(capacity as usize) as *u8;
		
		memory.copy(slice.data as addr, data as addr, slice.length);
		data[slice.length] = 0;
		
		return String {
			data: data,
			length: slice.length as u32,
			capacity: capacity
		};
	}
	
    pub func from(integer: u64) -> String {
        var capacity: u32 = 32;
		var data = memory.alloc(capacity as u64) as *u8;
		var length: u32 = 0;
				
		var remainder = integer;
        
		while true {
			data[length] = (remainder % 10) as u8 + '0';
			length += 1;
			remainder /= 10;
            
            if remainder == 0 { break; }
		}
		
		data[length] = 0;
		        
		var string = String { data, capacity, length };
		string.reverse_in_place();
		return string;
    }
    
	pub func from(integer: i64) -> String {
        var capacity: u32 = 32;
		var data = memory.alloc(capacity as u64) as *u8;
		var length: u32 = 0;
		
		var negative = false;
		
		var remainder = integer;
		if remainder < 0 {
			negative = true;
			remainder = -remainder;
		}
		
		while true {
			data[length] = (remainder % 10) as u8 + '0';
			length += 1;
			remainder /= 10;
            
            if remainder == 0 { break; }
		}
		
		if negative {
			data[length] = '-';
			length += 1;
		}
		
		data[length] = 0;
		
		var string = String { data, capacity, length };
		string.reverse_in_place();
		return string;
	}
    
    pub func concat(a: String, b: String) -> String {
        a.append_str(b);
        return a;
    }
    
    pub func __deinit__(self) {
        memory.free(self.data as addr);
        # print("deinit string: ");
        # println(self.data);
    }
	
    pub func copy(self) -> String {
        var size = self.length as usize + 1;
        var data = memory.alloc(size) as *u8;
        memory.copy(self.data as addr, data as addr, size);
        
        return String {
			data: data,
			length: self.length,
			capacity: self.length + 1
		};
    }
    
	pub func append(self, char: u8) {
		self.length = self.length + 1;
		self.ensure_capacity(self.length + 1);
        
        var index = self.length - 1;
		self.data[index] = char;
		self.data[self.length] = 0;
	}
	
	pub func append_str(self, other: String) {
		var new_length = self.length + other.length;
		self.ensure_capacity(new_length + 1);
		
		var copy_dst = self.data as addr + self.length as addr;
		var copy_src = other.data as addr;
		memory.copy(copy_src, copy_dst , other.length as usize + 1);
		
		self.length = new_length;
	}

	pub func append_cstr(self, other: *u8) {
		var other_length = strlen(other) as u32;
	
		var new_length = self.length + other_length;
		self.ensure_capacity(new_length + 1);
		
		var copy_dst = self.data as addr + self.length as addr;
		var copy_src = other as addr;
		memory.copy(copy_src, copy_dst, other_length as usize + 1);
		
		self.length = new_length;
	}
	
	pub func substr(self, start: u32, end: u32) -> String {			
		var substr_length = end - start;
		var substr_data = memory.alloc(substr_length as usize + 1) as *u8;
								
		var copy_dest = substr_data as addr;
		var copy_src = self.data as addr + start as addr;
		memory.copy(copy_src, copy_dest, substr_length as usize);
		
		substr_data[substr_length] = 0;
	
		return String {
			data: substr_data,
			length: substr_length,
			capacity: substr_length
		};
	}
    
    pub func find(self, char: u8) -> i32 {
        for i in 0..self.length as i32 {
            if self.data[i] == char {
                return i;
            }
        }
        
        return -1;
    }
    
    pub func rfind(self, char: u8) -> i32 {
        var i = self.length as i32 - 1;
        
        while i >= 0 {
            if self.data[i] == char {
                return i;
            }
            i -= 1;
        }
    }
	
	pub func find(self, substr: String) -> i32 {	
		var i = 0 as u32;
		while i < self.length - substr.length {
			if self.data[i] == substr.data[0] {
				var j = 1 as u32;
				var matching = true;
				while j < substr.length {
					if self.data[i + j] != substr.data[j] { matching = false; }
					j = j + 1;
				}
				if matching { return i as i32; }
			}
			
			i = i + 1;
		}
		
		return -1;
	}
	
	pub func cstr(self) -> *u8 {
		return self.data;
	}
	
    pub func to_i32(self) -> ?i32 {
        var last_char: *u8;
        var result = strtol(self.data, &last_char, 10);
        
        if last_char != self.data + self.length as *u8 {
            return none;
        } else {
            return result;
        }
    }
    
    pub func to_f32(self) -> ?f32 {
        var last_char: *u8;
        var result = strtof(self.data, &last_char);
        
        if last_char != self.data + self.length as *u8 {
            return none;
        } else {
            return result;
        }
    }
    
	pub func to_i64(self) -> i64 {	
		var sign: i64 = 1;
		var last_index = 0;
		
		if self.data[0] == '-' {
			sign = -1 as i64;
			last_index = 1;
		}
		
		var result: i64 = 0;
		var index = self.length as i32 - 1;
		var place_value: i64 = 1;
		
		while index >= last_index {		
			var digit = (self.data[index] - '0') as i64;
			result += digit * place_value;

			index -= 1;
			place_value *= 10;
		}
		
		return sign * result;
	}
    
    pub func __add__(self, rhs: String) -> String {
        return concat(*self, rhs);
    }
    
    pub func __eq__(self, rhs: *String) -> bool {
        return strcmp(self.data, rhs.data) == 0;
    }
    
    pub func __ne__(self, rhs: *String) -> bool {
        return strcmp(self.data, rhs.data) != 0;
    }
    
    pub func __str__(self) -> String {
        return self.copy();
    }
    
    pub func __repr__(self) -> String {
        var result = str("\"");
        
        for i in 0..self.length {
            var char = self.data[i];
            
            if char == '\n' {
                result.append('\\');
                result.append('n');
            } if char == '\r' {
                result.append('\\');
                result.append('r');
            } if char == '\t' {
                result.append('\\');
                result.append('t');
            } else {
                result.append(char);
            }
        }
        
        result.append('\"');
        
        return result;
    }
    
    pub func __hash__(self) -> u64 {
        # www.cse.yorku.ca/~oz/hash.html
        
        var hash: u64 = 5381;
        
        for i in 0..self.length {
            hash = ((hash << 5) + hash) + self.data[i] as u64;
        }
        
        return hash;
    }
	
	func ensure_capacity(self, required: u32) {
        if self.capacity >= required {
            return;
        }
    
        if self.capacity == 0 {
            self.capacity = required;
        } else {
            while self.capacity < required {
                self.capacity = 2 * self.capacity;
            }
        }

        self.data = memory.realloc(self.data as addr, self.capacity as usize) as *u8;
	}
	
	func reverse_in_place(self) {
		for i1 in 0..self.length / 2 {
			var i2 = self.length - 1 - i1 as u32;
		
			var c1 = self.data[i1];
			var c2 = self.data[i2];
			
			self.data[i1] = c2;
			self.data[i2] = c1;
		}
	}
}

func str(cstr: *u8) -> String {
    return String.from(cstr);
}