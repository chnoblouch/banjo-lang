use std.{system.panic, config};
use c.lib.{
	stdlib.{malloc as cmalloc, realloc as crealloc, free as cfree},
	string.{memcpy as cmemcpy, memset as cmemset}
};

pub func alloc(size: usize) -> addr {
	var pointer = cmalloc(size);
	
	meta if config.BUILD_CONFIG == config.DEBUG {
		if pointer == null {
			panic("out of memory");
		}
	}
	
	return pointer;
}

pub func realloc(pointer: addr, size: usize) -> addr {
	return crealloc(pointer, size);
}

pub func free(pointer: addr) {
	cfree(pointer);
}

pub func copy(src: addr, dst: addr, size: usize) {
	cmemcpy(dst, src, size);
}

pub func alloc_box[T]() -> *T {
	var size = meta.size(T);
	return alloc(size) as *T;
}

pub func box[T](@unmanaged value: T) -> *T {
	var size = meta.size(T);
	var ptr = alloc(size) as *T;
	copy(&value as addr, ptr as addr, size);
	return ptr;
}

pub func zero[T]() -> T {
	var value: T;
	cmemset(&value as addr, 0, meta.size(T));
	return value;
}

struct UniquePtr[T] {
    var ptr: *T;

    func new(@unmanaged value: T) -> UniquePtr[T] {
        var ptr = alloc(meta.size(T)) as *T;
        copy(&value as addr, ptr as addr, meta.size(T));
        return UniquePtr { ptr };
    }
    
    func __deinit__(self) {
        free(self.ptr as addr);
    }
}