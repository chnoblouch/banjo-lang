use c.lib.{
    stdlib.{malloc as cmalloc, realloc as crealloc, free as cfree},
    string.{memcpy as cmemcpy, memcmp as cmemcmp, memset as cmemset}
};

# var alloc_counter: u32 = 0;
# var free_counter: u32 = 0;

pub func alloc(size: usize) -> addr {
    # alloc_counter += 1;

    var pointer = cmalloc(size);
    return pointer;
}

pub func realloc(pointer: addr, size: usize) -> addr {
    return crealloc(pointer, size);
}

pub func free(pointer: addr) {
    # free_counter += 1;

    cfree(pointer);
}

pub func copy(src: addr, dst: addr, size: usize) {
    cmemcpy(dst, src, size);
}

pub func compare(addr0: addr, addr1: addr, size: usize) -> bool {
    return cmemcmp(addr0, addr1, size) == 0;
}

pub func alloc_box[T]() -> *T {
    return alloc(meta(T).size) as *T;
}

pub func box[T](value: T) -> *T {
    var box = alloc(meta(T).size) as *T;
    *box = value;
    return box;
}

pub func zero[T]() -> T {
    var value: T;
    cmemset(&value, 0, meta(T).size);
    return value;
}

struct PointerMoveIter[T] {
    var pointer: *T;
    var end: *T;
    
    pub func new(pointer: *T, end: *T) -> PointerMoveIter[T] {
        return PointerMoveIter[T] { pointer, end };
    }
    
    func __next__(self) -> ?T {
        if self.pointer == self.end {
            return none;
        }
        
        var value: T;
        copy(self.pointer, &value, meta(T).size);
        self.pointer += 1;
        return value;
    }
}

struct PointerRefIter[T] {
    var pointer: *T;
    var end: *T;
    
    pub func new(pointer: *T, end: *T) -> PointerRefIter[T] {
        return PointerRefIter[T] { pointer, end };
    }
    
    func __next__(self) -> ?*T {
        if self.pointer == self.end {
            return none;
        }
        
        var pointer = self.pointer;
        self.pointer += 1;
        return pointer;
    }
}
