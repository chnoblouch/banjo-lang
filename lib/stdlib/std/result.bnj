use std.convert.str;

struct Result[T, E] {
	var successful: bool;
    @no_deinit var value: T;
    @no_deinit var error: E;
    
    pub func success(value: T) -> Result[T, E] {
        return Result[T, E] {
            successful: true,
            value,
            error: undefined
        };
    }
    
    pub func failure(error: E) -> Result[T, E] {
        return Result[T, E] {
            successful: false,
            value: undefined,
            error
        };
    }
    
    pub func unwrap(self) -> T {
        if !self.successful {
            panic(str(self.error));
        }
        
        return self.value;
    }
	
	pub func __str__(self) -> String {
        if self.successful {
            return str(self.value);
        } else {
            return str(self.error);
        }
    }
    
    pub func __deinit__(self) {
        meta if type(T).has_method("__deinit__") {
            if self.successful {
                self.value.__deinit__();
            }
        }
        
        meta if type(E).has_method("__deinit__") {
            if !self.successful {
                self.error.__deinit__();
            }
        }
    }
}