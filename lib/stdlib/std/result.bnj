use std.{system.panic, convert.to_string};

struct Result[T, E] {
    var successful: bool;
    @unmanaged var value: T;
    @unmanaged var error: E;
    var unwrapped: bool;
    
    pub func new_success(value: T) -> Result[T, E] {
        return Result[T, E] {
            successful: true,
            value,
            error: undefined,
            unwrapped: false,
        };
    }
    
    pub func new_failure(error: E) -> Result[T, E] {
        return Result[T, E] {
            successful: false,
            value: undefined,
            error,
            unwrapped: false,
        };
    }
    
    pub func unwrap(@byval self) -> T {
        if !self.successful {
            panic("tried to unwrap error result: " + to_string(self.error));
        }
        
        self.unwrapped = true;
        return self.value;
    }

    pub func unwrap_error(@byval self) -> E {
        if self.successful {
            panic("tried to unwrap successful result to error");
        }

        self.unwrapped = true;
        return self.error;
    }
    
    pub func __str__(self) -> String {
        if self.successful {
            return to_string(self.value);
        } else {
            return to_string(self.error);
        }
    }
    
    meta if meta(T).is_resource || meta(E).is_resource {
        pub func __deinit__(self) {
            if self.unwrapped {
                return;
            }

            if self.successful {
                __builtin_deinit(self.value);
            } else {
                __builtin_deinit(self.error);
            }
        }
    }
}