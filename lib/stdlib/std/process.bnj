use std.convert.str;
use os;

struct Command {
	var program: *u8;
	var args: [*u8];
	var stdin: Stdio;
	var stdout: Stdio;
	var stderr: Stdio;
}

enum Stdio {
	PIPE,
	INHERIT,
	NULL
}

struct Process {
	var handle: addr;

	pub func spawn(command: Command) -> Process {
		var command_line = str(command.program);
		
		for arg in command.args {
			command_line.append(' ');
			command_line.append_str(str(arg));
		}
        
		var handle = os.process.spawn(command_line.cstr());
		return Process { handle };
	}
	
	pub func stdin(self) -> ProcessStdin {
		return ProcessStdin { handle: self.handle };
	}

	pub func wait(self) {
		os.process.wait(self.handle);
	}
}

struct Output {
	var exit_status: i32;
	var stdout: *u8;
	var stderr: *u8;
}

struct ProcessStdin {
	var handle: addr;
	
	pub func write(self, data: addr, length: usize) {
		#platform.process.write_stdin(self.handle, data, length);
	}
}