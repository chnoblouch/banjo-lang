#ifndef BANJO_TARGET_WASM_OPCODE_H
#define BANJO_TARGET_WASM_OPCODE_H

#include "banjo/mcode/instruction.hpp"

#include <string_view>
#include <unordered_map>

namespace banjo::target {

namespace WasmOpcode {
enum {
    BLOCK,
    END_BLOCK,
    LOOP,
    END_LOOP,
    BR,
    BR_IF,
    BR_TABLE,
    END_FUNCTION,
    CALL,
    DROP,
    SELECT,
    LOCAL_GET,
    LOCAL_SET,
    LOCAL_TEE,
    GLOBAL_GET,
    GLOBAL_SET,
    I32_LOAD,
    I64_LOAD,
    F32_LOAD,
    F64_LOAD,
    I32_LOAD8_S,
    I32_LOAD8_U,
    I32_LOAD16_S,
    I32_LOAD16_U,
    I32_STORE,
    I64_STORE,
    F32_STORE,
    F64_STORE,
    I32_STORE8,
    I32_STORE16,
    I32_CONST,
    I64_CONST,
    F32_CONST,
    F64_CONST,
    I32_EQ,
    I32_NE,
    I32_LT_S,
    I32_LT_U,
    I32_GT_S,
    I32_GT_U,
    I32_LE_S,
    I32_LE_U,
    I32_GE_S,
    I32_GE_U,
    I64_EQ,
    I64_NE,
    I64_LT_S,
    I64_LT_U,
    I64_GT_S,
    I64_GT_U,
    I64_LE_S,
    I64_LE_U,
    I64_GE_S,
    I64_GE_U,
    F32_EQ,
    F32_NE,
    F32_LT,
    F32_GT,
    F32_LE,
    F32_GE,
    F64_EQ,
    F64_NE,
    F64_LT,
    F64_GT,
    F64_LE,
    F64_GE,
    I32_ADD,
    I32_SUB,
    I32_MUL,
    I32_DIV_S,
    I32_DIV_U,
    I32_REM_S,
    I32_REM_U,
    I64_ADD,
    I64_SUB,
    I64_MUL,
    I64_DIV_S,
    I64_DIV_U,
    I64_REM_S,
    I64_REM_U,
    F32_ADD,
    F32_SUB,
    F32_MUL,
    F32_DIV,
    I32_WRAP_I64,
    I64_EXTEND_I32_S,
    I64_EXTEND_I32_U,
    F32_CONVERT_I32_S,
    F32_CONVERT_I32_U,
    F32_CONVERT_I64_S,
    F32_CONVERT_I64_U,
    F32_DEMOTE_F64,
    F64_CONVERT_I32_S,
    F64_CONVERT_I32_U,
    F64_CONVERT_I64_S,
    F64_CONVERT_I64_U,
    F64_PROMOTE_F32,
    I32_EXTEND8_S,
    I32_EXTEND16_S,
    I32_TRUNC_SAT_F32_S,
    I32_TRUNC_SAT_F32_U,
    I32_TRUNC_SAT_F64_S,
    I32_TRUNC_SAT_F64_U,
    I64_TRUNC_SAT_F32_S,
    I64_TRUNC_SAT_F32_U,
    I64_TRUNC_SAT_F64_S,
    I64_TRUNC_SAT_F64_U,
};

extern const std::unordered_map<mcode::Opcode, std::string_view> NAMES;

} // namespace WasmOpcode

} // namespace banjo::target

#endif
